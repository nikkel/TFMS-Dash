{"version":3,"sources":["logo.png","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","token","setToken","getVerification","a","api","key","user","profile","then","response","console","log","res","catch","err","useEffect","onVerifyToken","event","preventDefault","alert","className","id","htmlFor","type","placeholder","onChange","target","value","onClick","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,uRC0F5BC,EA9EH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACTC,EADS,KACFC,EADE,KAGVC,EAAe,uCAAG,sBAAAC,EAAA,6DACtBC,IAAIC,IAAIL,GADc,SAETI,IAAIE,KACdC,UACAC,MAAK,SAACC,GAEL,GADAC,QAAQC,IAAIF,GACR,UAAWA,EAAU,CACvB,IAAMG,EAAMH,EAAQ,MAEpB,OADAG,EAAG,YAAiB,EACbA,EAGT,KAAM,UAAWH,GAAW,CAC1B,IAAMG,EAAMH,EAEZ,OADAG,EAAG,YAAiB,EACbA,EAGT,OAAOH,KAERI,OAAM,SAACC,OApBY,mFAAH,qDAyBrBC,qBAAU,eAEV,IAKMC,EAAa,uCAAG,WAAOC,GAAP,eAAAd,EAAA,6DACpBc,EAAMC,iBADc,SAEGhB,IAFH,QAGW,KADzBO,EAFc,QAGR,YACVU,MAAM,6BAAD,OAC0BV,EAAQ,QAAR,aAD1B,OAIwB,IAA3BA,EAAQ,YACVU,MAAM,2BAAD,OAA4BV,EAAQ,MAApC,MATa,2CAAH,sDAanB,OACE,yBAAKW,UAAU,WACb,yBAAKA,UAAU,gBACb,8DACA,0BAAMC,GAAG,gBAAT,WAEE,6BAFF,mCAKA,8BACE,yBAAKD,UAAU,cACb,2BAAOE,QAAQ,aAAf,gBACA,2BACEC,KAAK,OACLC,YAAY,6BACZC,SAjCU,SAACR,GACrBhB,EAASgB,EAAMS,OAAOC,OACtBjB,QAAQC,IAAR,qBAA0BM,EAAMS,OAAOC,YAkCjC,4BAAQJ,KAAK,SAASK,QAASZ,GAA/B,YAKJ,yBAAKI,UAAU,iBACb,yBAAKS,IAAKC,IAAMV,UAAU,OAAOW,IAAI,YCxEzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdjC,OAAM,SAAAkC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.41c069d2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.1aa7368a.png\";","/** @format */\n\nimport React, { useEffect, useState } from 'react';\n// //eslint-disable-next-line\n// import logo from './logo.svg';\n// import logo from './sa-igloo-logo.png';\nimport logo from './logo.png';\n\nimport './App.css';\nimport './AppStyle.css';\nimport api from 'torn-api';\n\nconst App = () => {\n  const [token, setToken] = useState([]);\n\n  const getVerification = async () => {\n    api.key(token);\n    return await api.user\n      .profile()\n      .then((response) => {\n        console.log(response);\n        if ('error' in response) {\n          const res = response['error'];\n          res['validToken'] = false;\n          return res;\n        }\n\n        if (!('error' in response)) {\n          const res = response;\n          res['validToken'] = true;\n          return res;\n        }\n\n        return response;\n      })\n      .catch((err) => {\n        return;\n      });\n  };\n\n  useEffect(() => {});\n\n  const onTokenChange = (event) => {\n    setToken(event.target.value);\n    console.log(`Token Set: ${event.target.value}`);\n  };\n\n  const onVerifyToken = async (event) => {\n    event.preventDefault();\n    const response = await getVerification();\n    if (response['validToken'] === true) {\n      alert(\n        `Success, you're a part of ${response['faction']['faction_name']}!`\n      );\n    }\n    if (response['validToken'] === false) {\n      alert(`Invalid token! - {TORN: ${response['error']}}`);\n    }\n  };\n\n  return (\n    <div className='wrapper'>\n      <div className='left-wrapper'>\n        <h1>Torn Faction Management System</h1>\n        <span id='welcome-text'>\n          Welcome,\n          <br />\n          Please login using your API key\n        </span>\n        <form>\n          <div className='form-outer'>\n            <label htmlFor='login-key'>Torn API Key</label>\n            <input\n              type='text'\n              placeholder='Enter your Torn API Key...'\n              onChange={onTokenChange}\n            ></input>\n          </div>\n          <button type='button' onClick={onVerifyToken}>\n            Login.\n          </button>\n        </form>\n      </div>\n      <div className='right-wrapper'>\n        <img src={logo} className='logo' alt='logo' />\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}